---
AWSTemplateFormatVersion: 2010-09-09
Description: "This stack maintains app related resources, such as ELB, ASG, and EC2"


Parameters:

  EnvironmentName:
    Description: The name to associate resources with
    Type: String
    Default: "dev"
  KeyName:
    Description: Application ssh login keypair name
    Type: AWS::EC2::KeyPair::KeyName
    Default: "fctest"
  AMIId:
    Description: AMI Id.
    Type: String
    Default: ami-08c26730c8ee004fa
  DesiredInstances:
    Description: Application Desired Instances
    Type: String
    Default: "2"
  DockerVersion:
    Description: docker image tag
    Type: String
    Default: "latest"
  AllowedCidrRanges:
    Description: AllowedCidr used to the bastion
    Type: String
    Default: 10.63.0.0/16
  BastionSSHKeyName:
    Description: SSHkey name for the bastion box.
    Type: String
    Default: "fctestbastion"
  HostedZoneID:
    Description: "hosted zone id for the new sub domain"
    Type: String
  DomainName:
    Description: "domain name want to register"
    Type: String


Resources:

  EC2LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub loggroup-ec2-${EnvironmentName}
      RetentionInDays: 7

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
        Fn::ImportValue:
          Fn::Sub: VpcId-${EnvironmentName}
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-EC2-ELB-SG

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      ConnectionSettings:
        IdleTimeout: 3600
      Subnets:
        Fn::Split:
          - ','
          - Fn::ImportValue:
              Fn::Sub: PublicSubnets-${EnvironmentName}
      CrossZone: true
      SecurityGroups:
      - !Ref ELBSecurityGroup
      Scheme: "internet-facing"
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: TCP
        InstanceProtocol: TCP
      HealthCheck:
        Target: !Sub HTTP:80/
        HealthyThreshold: "2"
        UnhealthyThreshold: "2"
        Interval: "10"
        Timeout: "5"
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 30
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-EC2-ELB

  EC2ASG:
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
        PauseTime: PT15M
        WaitOnResourceSignals: True
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        Fn::Split:
          - ','
          - Fn::ImportValue:
              Fn::Sub: PrivateSubnets-${EnvironmentName}
      DesiredCapacity: !Ref DesiredInstances
      HealthCheckGracePeriod: 500
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref EC2ServerLaunchConfiguration
      LoadBalancerNames:
      - !Ref ElasticLoadBalancer
      MinSize: "1"
      MaxSize: "2"
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref DesiredInstances
        Timeout: PT15M
  # Assumption: BastionAccessSecurityGroup already created and exported
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - ELBSecurityGroup
    Properties:
      GroupDescription: EC2 Security Group
      VpcId:
        Fn::ImportValue:
          Fn::Sub: VpcId-fctest-${EnvironmentName}
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref ELBSecurityGroup
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-EC2-SecurityGroup

  EC2ServerLaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        awsLogConfig:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/amazon/ssm/amazon-ssm-agent.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/amazon/ssm/amazon-ssm-agent.log
                log_stream_name = {instance_id}/var/log/amazon/ssm/amazon-ssm-agent.log
                log_group_name = ${EC2LogGroup}
                [/var/log/amazon/ssm/errors.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/amazon/ssm/errors.log
                log_stream_name = {instance_id}/var/log/amazon/ssm/errors.log
                log_group_name = ${EC2LogGroup}
                [/var/log/audit/audit.log]
                file = /var/log/audit/audit.log
                log_stream_name = {instance_id}/var/log/audit/audit.log
                log_group_name = ${EC2LogGroup}
                [/var/log/awslogs.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/awslogs.log
                log_stream_name = {instance_id}/var/log/awslogs.log
                log_group_name = ${EC2LogGroup}
                [/var/log/boot.log]
                file = /var/log/boot.log
                log_stream_name = {instance_id}/var/log/boot.log
                log_group_name = ${EC2LogGroup}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}/var/log/cfn-init.log
                log_group_name = ${EC2LogGroup}
                [/var/log/cfn-wire.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-wire.log
                log_stream_name = {instance_id}/var/log/cfn-wire.log
                log_group_name = ${EC2LogGroup}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                log_group_name = ${EC2LogGroup}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}/var/log/cloud-init.log
                log_group_name = ${EC2LogGroup}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}/var/log/cron
                log_group_name = ${EC2LogGroup}
                [/var/log/maillog]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/maillog
                log_stream_name = {instance_id}/var/log/maillog
                log_group_name = ${EC2LogGroup}
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}/var/log/messages
                log_group_name = ${EC2LogGroup}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}/var/log/secure
                log_group_name = ${EC2LogGroup}
                [/var/log/yum.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/yum.log
                log_stream_name = {instance_id}/var/log/yum.log
                log_group_name = ${EC2LogGroup}
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              awslogsd:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/awslogs/awslogs.conf'
                - '/etc/awslogs/awscli.conf'
    Properties:
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref AMIId
      InstanceType: t2.micro
      SecurityGroups:
      - !Ref EC2SecurityGroup
      - Fn::ImportValue:
          !Sub BastionAccessSecurityGroup-${EnvironmentName}
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Start cfn-init
          yum install -y aws-cfn-bootstrap python unzip

          # install aws cli
          curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
          unzip awscli-bundle.zip
          ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
          export PATH=/usr/local/bin:$PATH
          aws --version

          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2ServerLaunchConfiguration || error_exit 'Failed to run cfn-init'
          eval $(aws ecr get-login --no-include-email --region ${AWS::Region})
          docker run -d -p 80:9292 ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EnvironmentName}:${DockerVersion}

          echo '### Wait until instance is registered as healthy in the ELB'
          until [ "$state" == "InService" ]; do
            state=$(aws --region ${AWS::Region} elb describe-instance-health \
                        --load-balancer-name ${ElasticLoadBalancer} \
                        --instances $(curl -s http://169.254.169.254/latest/meta-data/instance-id) \
                        --query InstanceStates[0].State \
                        --output text)
            sleep 10
          done

          # signal success
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2ASG

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref InstanceRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ServerInstanceRole-${EnvironmentName}
      Path: /app/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: !Sub server-${EnvironmentName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - ec2:*
                - elasticloadbalancing:DescribeInstanceHealth
                - autoscaling:DescribeTags
              Resource: "*"
        - PolicyName: create-log-stream
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:Describe*
              Resource: !GetAtt EC2LogGroup.Arn
        - PolicyName: allow-metric-data
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
              - cloudwatch:PutMetricData
              - cloudwatch:EnableAlarmActions
              - cloudwatch:PutMetricAlarm
              Resource: "*"
        - PolicyName: allow-read-only-access-to-ecr
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:BatchGetImage
              Resource:
                Fn::ImportValue:
                      Fn::Sub: ecr-repo-${EnvironmentName}
            - Effect: Allow
              Action:
              - ecr:GetAuthorizationToken
              Resource: "*"


Outputs:
  ElasticLoadBalancer:
    Description: LB for the app
    Value: !Ref ElasticLoadBalancer
    Export:
      Name: !Sub ElasticLoadBalancer-${EnvironmentName}
  ElasticLoadBalancerDNS:
    Description: DNS name of the LB for the app
    Value: !GetAtt ElasticLoadBalancer.DNSName
    Export:
      Name: !Sub ElasticLoadBalancerDNS-${EnvironmentName}
