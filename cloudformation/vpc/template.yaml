---
AWSTemplateFormatVersion:  "2010-09-09"
Description: "This stack serves as foundation for the app. It contains VPC, subnet, NAT, EIP, etc"

Parameters:

  EnvironmentName:
    Description: The name to associate resources with
    Type: String
    Default: fctest-dev
  VpcCIDR:
    Description: Please enter the IP CIDR range
    Type: String
    Default: 192.168.0.0/16
  AvailabilityZones:
    Description: The AZs in the target region
    Type: CommaDelimitedList
    Default: ap-southeast-2a,ap-southeast-2b,ap-southeast-2c
  PublicSubnetCIDR:
    Description: The Public CIDR Ranges
    Type: CommaDelimitedList
    Default: 192.168.0.0/20,192.168.16.0/20,192.168.32.0/20,192.168.96.0/20
  PrivateSubnetCIDR:
    Description: The Private CIDR Ranges
    Type: CommaDelimitedList
    Default: 192.168.48.0/20,192.168.64.0/20,192.168.80.0/20
  VpcFlowLogRetention:
    Description: Flow Log Retention in Days
    Type: String
    Default: 3
  KeyName:
    Description: Application ssh login keypair name
    Type: AWS::EC2::KeyPair::KeyName
    Default: "fctest"
  DockerVersion:
    Description: docker image tag
    Type: String
    Default: "latest"
  AllowedCidrRanges:
    Description: AllowedCidr used to the bastion
    Type: String
    Default: 10.63.0.0/16
  BastionSSHKeyName:
    Description: SSHkey name for the bastion box.
    Type: AWS::EC2::KeyPair::KeyName
    Default: "fctestbastion"
  HostedZoneID:
    Description: "hosted zone id for the new sub domain"
    Type: String
  DomainName:
    Description: "domain name want to register"
    Type: String


Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  FlowLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        -
          Effect: "Allow"
          Principal:
            Service:
              - "vpc-flow-logs.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      Path: "/"
      RoleName: !Sub ${EnvironmentName}-vpc-flow-log

  FlowLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "allow_cw_logs"
      PolicyDocument:
        Statement:
        -
          Effect: "Allow"
          Action:
           - "logs:CreateLogGroup"
           - "logs:CreateLogStream"
           - "logs:PutLogEvents"
           - "logs:DescribeLogGroups"
           - "logs:DescribeLogStreams"
          Resource: "*"
      Roles:
        -
          !Ref FlowLogRole

  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${EnvironmentName}-flow-logs
      RetentionInDays: !Ref VpcFlowLogRetention

  FlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn : !GetAtt FlowLogRole.Arn
      LogGroupName : !Ref CloudWatchLogGroup
      ResourceId : !Ref VPC
      ResourceType : VPC
      TrafficType : ALL

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      CidrBlock: !Select [ 0, !Ref PublicSubnetCIDR ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-a

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
      CidrBlock: !Select [ 1, !Ref PublicSubnetCIDR ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-b

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !Ref AvailabilityZones ]
      CidrBlock: !Select [ 2, !Ref PublicSubnetCIDR ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-c

  PublicServiceSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !Ref AvailabilityZones ]
      CidrBlock: !Select [ 3, !Ref PublicSubnetCIDR ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-service-c

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      CidrBlock: !Select [ 0, !Ref PrivateSubnetCIDR ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-a

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
      CidrBlock: !Select [ 1, !Ref PrivateSubnetCIDR ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-b

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !Ref AvailabilityZones ]
      CidrBlock: !Select [ 2, !Ref PrivateSubnetCIDR ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-c

  NatGatewayAEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayBEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayCEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAEIP.AllocationId
      SubnetId: !Ref PublicSubnetA

  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBEIP.AllocationId
      SubnetId: !Ref PublicSubnetB

  NatGatewayC:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayCEIP.AllocationId
      SubnetId: !Ref PublicSubnetC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC

  PublicServiceSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicServiceSubnet

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-a

  DefaultPrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-b

  DefaultPrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB

  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-c

  DefaultPrivateRouteC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayC

  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref PrivateSubnetC

Outputs:
  VpcId:
    Description: ID of the created VPC
    Value: !Ref VPC
    Export:
      Name: !Join ["-", ["VpcId", !Ref EnvironmentName]]

  VpcName:
    Description: Name of the created VPC
    Value: !Sub ${EnvironmentName}-vpc
    Export:
      Name: !Join ["-", ["VpcName", !Ref EnvironmentName]]

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnetA, !Ref PublicSubnetB, !Ref PublicSubnetC ]]
    Export:
      Name: !Join ["-", ["PublicSubnets", !Ref EnvironmentName]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnetA, !Ref PrivateSubnetB, !Ref PrivateSubnetC ]]
    Export:
      Name: !Join ["-", ["PrivateSubnets", !Ref EnvironmentName]]

  NetworkCidr:
    Description: Network cidr used by ${EnvironmentName} cluster.
    Value: !Ref VpcCIDR
    Export:
      Name: !Join ["-", ["NetworkCidr", !Ref EnvironmentName]]

  NatGateways:
    Description: Natgateway logical ids in
    Value: !Join [ ",", [ !Ref NatGatewayA, !Ref NatGatewayB, !Ref NatGatewayC ]]
    Export:
      Name: !Join ["-", ["NatGateways", !Ref EnvironmentName]]

  PublicServiceSubnet:
    Description: Service subnet which is used to provision utilities e.g. bastion.
    Value: !Ref PublicServiceSubnet
    Export:
      Name: !Join ["-", ["PublicServiceSubnet", !Ref EnvironmentName]]